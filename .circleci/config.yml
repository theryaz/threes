# JavaScript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
orbs:
  aws-ecr: circleci/aws-ecr@6.7.0
version: 2.1
workflows:
  version: 2
  staging:
    jobs:
      - build-client
      - build-server
      - use-server
      - deploy-client:
          requires:
            - build-client
      - aws-ecr/build-and-push-image:
          requires:
            - build-server
          attach-workspace: true
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          repo: threes/server
          region: AWS_DEFAULT_REGION
          path: /server-build
      # - deploy-server:
      #     requires:
      #       - aws-ecr/build-and-push-image

jobs:
  build-client:
    docker:
      - image: node:13.6.0
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - client-node-{{ checksum "client-ts/package.json" }}
            - client-node-
      - run:
          name: Install Node Modules
          command: |
            cd client-ts
            npm install
      - save_cache:
          paths:
            - client-ts/node_modules
          key: client-node-{{ checksum "client-ts/package.json" }}
      - run:
          name: Compile Vue Client
          command: |
            cd client-ts
            npm run build:staging
      - save_cache:
          paths:
            - client-ts/dist
          key: client-dist
  deploy-client:
    docker:
      - image: node:13.6.0
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - client-dist
      - run:
          name: Install AWS CLI
          command: |
            apt-get update -y
            apt-get install -y python python-pip
            pip install awscli
      - run:
          name: Deploy to S3
          command: |
            cd client-ts
            npm run s3sync:staging

  build-server:
    docker:
      - image: node:13.6.0
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - server-node-{{ checksum "server/package.json" }}
            - server-node-
      - run:
          name: Install Node Modules
          command: |
            cd server
            npm install
      - save_cache:
          paths:
            - server/node_modules
          key: server-node-{{ checksum "server/package.json" }}
      - run:
          name: Compile Server
          command: |
            cd server
            npm run build
      - persist_to_workspace:
          root: ./
          paths:
            - ./server
  use-server:
    docker:
      - image: node:13.6.0
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - server-node-{{ checksum "server/package.json" }}
            - server-node-
      - attach_workspace:
          at: /server-build
      - run:
          command: |
            - pwd
            - ls
            - ls /server-build
  deploy-server:
    docker:
      - image: docker:17.05.0-ce-git
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Deploy API to Rancher
          command: |
            echo $RANCHER_CLI_JSON > cli2.json
            RANCHER="docker run -v $(pwd)/cli2.json:/root/.rancher/cli2.json --rm bitbakery/rancher-cli-k8s rancher"
            $RANCHER login $RANCHER_URL --token $RANCHER_TOKEN
            $RANCHER ps

            SERVER_UPDATED=$($RANCHER kubectl --namespace=threes set image deployment/server server=$SERVER_TAG)
            (test -z "$SERVER_UPDATED" && $RANCHER kubectl --namespace=threes rollout restart deployment/server) || echo 0 # Override with 0 exit code.