# JavaScript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
orbs:
  aws-cli: circleci/aws-cli@0.1.19
jobs:
  build-deploy-stage:
    docker:
      # specify the version you desire here
      - image: node:13.6.0

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    working_directory: ~/repo

    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - client-node-{{ checksum "client-ts/package.json" }}
            - client-node-
      - restore_cache:
          keys:
            - server-node-{{ checksum "server/package.json" }}
            - server-node-

      - run:
          name: Install Node Modules
          command: |
            cd client-ts
            npm install
            cd ../server
            npm install


      - save_cache:
          paths:
            - client-ts/node_modules
          key: client-node-{{ checksum "client-ts/package.json" }}
      - save_cache:
          paths:
            - server/node_modules
          key: server-node-{{ checksum "server/package.json" }}

      #  Build

      - run:
          name: Compile Vue Client
          command: |
            cd client-ts
            npm run build:staging
      - run:
          name: Compile Server
          command: |
            cd server
            npm run build

      - run:
          name: Install AWS CLI
          command: |
            apt-get update -y
            apt-get install -y python python-pip
            pip install awscli

      # - save_cache:
      #     paths:
      #       - client-ts/dist
      #       - server/dist
      #     key: build-dists

      - run:
          name: Deploy API to Rancher
          command: |
            export SERVER_TAG=$AWS_ECR_URL/threes/server
            eval $(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)
            cd server
            docker build -t $SERVER_TAG build
            docker push $SERVER_TAG

            echo $RANCHER_CLI_JSON > cli2.json
            RANCHER="docker run -v $(pwd)/cli2.json:/root/.rancher/cli2.json --rm bitbakery/rancher-cli-k8s rancher"
            $RANCHER login $RANCHER_URL --token $RANCHER_TOKEN
            $RANCHER ps

            SERVER_UPDATED=$($RANCHER kubectl --namespace=threes set image deployment/server server=$SERVER_TAG)
            (test -z "$SERVER_UPDATED" && $RANCHER kubectl --namespace=threes rollout restart deployment/server) || echo 0 # Override with 0 exit code.

      - run:
          name: Deploy to S3
          command: |
            cd client-ts
            npm run s3sync:staging

  
workflows:
  version: 2
  staging:
    jobs:
      - build-deploy-stage:
          filters:
            branches:
              only: development